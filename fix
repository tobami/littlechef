#!/usr/bin/env python
from __future__ import print_function

import argparse

import sys
import os


# Messages
NO_ORDER = "No order given. Type 'fix -l' for a list of orders\n"
VERSION = 'LittleChef {0}'
INSTALL_ERROR = ("LittleChef was not correctly installed: "
                 "Couldn't import littlechef.py")

## Try to import package and set the fabfile path ##
fabfile = None
try:
    import littlechef
    # Get absolute directory for imported littlechef package
    dirname = os.path.dirname(os.path.abspath(littlechef.__file__))
    # Build path to the runner fabfile to pass to fabric
    fabfile = os.path.join(dirname, 'runner.py')
except ImportError:
    print(INSTALL_ERROR)
    sys.exit(1)


def get_commands():
    from fabric.main import list_commands, state, load_fabfile
    docstring, callables, default = load_fabfile(fabfile)
    state.commands.update(callables)
    commands_str = ""
    for c in list_commands("\n", "normal"):
        commands_str += c + "\n"
    return commands_str


def parse_arguments():
    """Gets the console arguments for Littlechef's fix command"""
    parser = argparse.ArgumentParser(
        description="Starts a Chef Solo configuration run",
        epilog=get_commands(),
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument("command", type=str, help="Littlechef command")

    parser.add_argument(
        "-v", "--version", action='version',
        version=VERSION.format(littlechef.__version__),
        help="Print littlechef version"
    )
    parser.add_argument(
        "-l", "--list", dest="list_commands", action="store_true",
        default=False, help="List all available orders"
    )
    parser.add_argument(
        "-y", "--yes", dest="assume_yes", action="store_true", default=False,
        help=('Automatic yes to prompts; assume "yes" as answer to all prompts'
              ' and run non-interactively')
    )
    parser.add_argument(
        "--no-report", dest="no_report", action="store_true", default=False,
        help="Don't save the chef-solo output as a report on the node"
    )
    parser.add_argument(
        "--why-run", dest="whyrun", action="store_true", default=False,
        help=("Do a configuration Whyrun, where no changes are "
              "performed to the node")
    )
    parser.add_argument(
        "-V", "--verbose", dest="verbose", action="store_true", default=False,
        help="Output 'processing' statements"
    )
    parser.add_argument(
        "-d", "--debug", action="store_true", default=False,
        help="Ask chef-solo for verbose and debugging output"
    )
    parser.add_argument(
        "-e", "--env", dest="environment", default=None,
        help="Using a certain chef environment"
    )
    parser.add_argument(
        "-c", "--concurrency", default=False,
        help="Execute commands concurrently"
    )
    return vars(parser.parse_args())


# commandline options
args = parse_arguments()


## Process args list and call fabric's main() ##
if not sys.argv:
    print(NO_ORDER)
else:
    if (os.path.basename(sys.argv[0]).startswith('fix')):
        # In windows, the first argument may be just "fix"
        fix_cmd = sys.argv[0]
    else:
        fix_cmd = None
    if len(sys.argv) == 1 and fix_cmd:
        # All that is in sys.argv is the fix command.
        print(NO_ORDER)
    else:
        # Check for version, that overrides everything else.
        if args['assume_yes']:
            littlechef.noninteractive = True
            try:
                sys.argv.remove('--yes')
            except ValueError:
                sys.argv.remove('-y')
        if args['no_report']:
            littlechef.enable_logs = False
            sys.argv.remove('--no-report')
        if args['whyrun']:
            littlechef.whyrun = True
            sys.argv.remove('--why-run')
        if args['concurrency']:
            try:
                # --concurrency=5
                sys.argv.remove('--concurrency={0}'.format(args['concurrency']))
            except ValueError:
                try:
                    # -c 5
                    sys.argv.remove('-c')
                    sys.argv.remove(args['concurrency'])
                except ValueError:
                    try:
                        # --concurrency 5
                        sys.argv.remove('--concurrency')
                        sys.argv.remove(args['concurrency'])
                    except ValueError:
                        pass
            try:
                c = int(args['concurrency'])
            except ValueError:
                c = False
            littlechef.concurrency = c
        if args['verbose']:
            littlechef.verbose = True
            try:
                sys.argv.remove('--verbose')
            except ValueError:
                sys.argv.remove('-V')
        if args['debug']:
            littlechef.loglevel = 'debug'
            littlechef.verbose = True
            try:
                sys.argv.remove('--debug')
            except ValueError:
                sys.argv.remove('-d')
        if args['environment'] is not None:
            littlechef.chef_environment = args['environment']
            try:
                # --env=5
                sys.argv.remove('--env={0}'.format(args['environment']))
            except ValueError:
                try:
                    # -e 5
                    sys.argv.remove('-e')
                    sys.argv.remove(args['environment'])
                except ValueError:
                    try:
                        # --env 5
                        sys.argv.remove('--env')
                        sys.argv.remove(args['environment'])
                    except ValueError:
                        pass

        # Otherwise, insert our fabfile at the correct place
        if len(sys.argv) < 2:
            raise argparse.ArgumentTypeError(NO_ORDER)
        if fix_cmd:
            sys.argv[1:1] = ['-f', fabfile]
        else:
            sys.argv[0:0] = ['-f', fabfile]
        # Pass control over to fabric
        # Fabric should now import runner with COOKING = True
        littlechef.__cooking__ = True
        from fabric import main
        main.main()
